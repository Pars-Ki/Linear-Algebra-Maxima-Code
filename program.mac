
 to_matrix(L):=block(
    if matrixp(L) then L
    else apply('matrix,L)
 )$

check_row_echelon(A) := block(
    [rows, cols, pivots, i, j, is_echelon , B],
    B : to_matrix(A),
    rows: length(B),
    cols: length(B[1]),
    pivots: [],
    is_echelon: true,
    
      for i:1 thru rows do (
        j: 1,
        while j <= cols and B[i][j] = 0 do j: j + 1,
        if j <= cols then (
            if not emptyp(pivots) and j <= last(pivots) then is_echelon: false,
            pivots: endcons(j, pivots)
        )
    ),
    is_echelon
)$

check_reduced_row_echelon(A) := block(
    [rows, cols, pivots, i, j , k, is_reduced_echelon , B],
    B : to_matrix(A),
    rows: length(B),
    cols: length(B[1]),
    pivots: [],
    is_reduced_echelon: true,
    
    for i:1 thru rows do (
        j: 1,
        while j <= cols and B[i][j] = 0 do j: j + 1,
        if j <= cols then (
            if not emptyp(pivots) and j <= last(pivots) then is_reduced_echelon: false,
            pivots: endcons(j, pivots),
            if B[i][j] # 1 then is_reduced_echelon: false,
            for k:1 thru rows do (
                if k # i and B[k][j] # 0 then is_reduced_echelon: false
            )
        )
    ),
    is_reduced_echelon
)$

check_permutation(A) := block(
    [B,rows,cols,is_permutation , i,j , count_ones_row , count_ones_col],
    B : to_matrix(A),
    rows : length(B),
    cols : length(B[1]),
    is_permutation : true,

    if rows # cols then return(false),
    for i:1 thru rows do(
        count_ones_row : 0,
        for j:1 thru cols do(
            if B[i][j] = 1 then count_ones_row : count_ones_row+1
            else if B[i][j] # 0 then is_permutation :false
        ),
        if count_ones_row # 1 then is_permutation : false
    ),
    for j:1 thru cols do(
        count_ones_col : 0,
        for i:1 thru cols do(
            if B[i][j] = 1 then count_ones_col : count_ones_col+1
            else if B[i][j] # 0 then is_permutation :false
        ),
        if count_ones_col # 1 then is_permutation : false
    ),
    is_permutation
)$

check_elementary(A) := block(
    [B,n, type: 0, I, i, j, k, diff_rows, scalar, found, diag_zero,flag],
    
    B : to_matrix(A),
    n: length(B),
    if n # length(B[1]) then return(0),
    
    
    I: ident(n),
    
    if B = I then (
        return(1)
    ),
    

    diff_rows: [],
    for i:1 thru n do (
        if B[i] # I[i] then diff_rows: endcons(i, diff_rows)
    ),
    

    if length(diff_rows) = 2 then (
        [i, j]: [diff_rows[1], diff_rows[2]],
        if B[i] = I[j] and B[j] = I[i] then (
            return(3)
        )
    )
    else if length(diff_rows) = 1 then (
        i: diff_rows[1],
        scalar: B[i][i],
        if scalar = 0 then(
             return(0)
        ),
        if scalar # 1 and B[i] = I[i] * scalar then (
            return(1)
        ),
        found: false,
        flag : false,
        for k:1 thru n while not found do (
            if k # i and B[i] = I[i] + I[k] * B[i][k] then (
                found: true,
                flag:true,
                return(2)
            )
        ),
        if flag then return(2)
    ),
    
    0
)$


/* Abolfazl */
random_lowertriangular(n, x) := block(
    [B],
    B : zeromatrix(n, n),
    for i:1 thru n do(
        for j:i thru n do(
            B[i, j] : 2 * random(x) - x
        )
    ),
    B
)$


/* Abolfazl */
random_invertible(n, x) := block(
    [B],
    B : zeromatrix(n, n),
    while determinant(B) = 0 do (
        for i:1 thru n do (
            for j:1 thru n do (
                B[i, j] : 2 * random(x) - x
            )
        )
    ),
    B
)$

/* Abolfazl */
random_permutation(n) := block(
    [B, A, t1, t2, h1, h2],
    B : zeromatrix(n, n),
    A : makelist(i, i, 1, n),
    for i:1 thru n do(
        t1 : random(n) + 1,
        t2 : random(n) + 1,
        h1 : A[t1],
        h2 : A[t2],
        A[t1] : h2,  
        A[t2] : h1 
    ),
    for j:1 thru n do(
        B[j, A[j]] : 1
    ),
    B
)$

random_reduced_row_echelon(n, m, x) := block(
    [A, pivots, i, j, k, current_row],
    A: zeromatrix(n, m),
    pivots: [],
    current_row: 1,
    
    for j:1 thru m while current_row <= n do (
        if random(1.0) > 0.5 then (
            A[current_row,j]: 1,
            pivots: endcons(j, pivots),
            
            for k:1 thru current_row-1 do A[k,j]: 0,
            
            for k:j+1 thru m do (
                A[current_row,k]: if integerp(x) then 
                                    random(2*x + 1) - x
                                else 
                                    x * (2*random(1.0) - 1)
            ),
            current_row: current_row + 1
        )
    ),
    A
)$

triangular_det(A) := block(
    [B,i,det],
    B:to_matrix(A),
    n:length(B),
    det:1,
    if is_upper_trianngular(B) or is_lower_trianngular(B) then (
        for i:1 thru n do(
            det : det*B[i][i]
        )   
    )
    else return("input matrix is not triangular"),
    det 
)$

is_upper_triangular(A):=block(
    [n,B,i,j,result],
    B:to_matrix(A),
    n:length(B),
    result : true,
    if n # length(B[1]) then return(false),

    for i:2 thru n do(
        for j:1 thru i-1 do(
            if B[i][j] # 0 then result :false
        )
    ),
    return(result)
)$

is_lower_triangular(A):=block(
    [n,B,i,j,result],
    B:to_matrix(A),
    n:length(B),
    result : true,
    if n # length(B[1]) then return(false),

    for i:1 thru n-1 do(
        for j:i+1 thru n do(
            if B[i][j] # 0 then result :false
        )
    ),
    return(result)
)$

triangular_inverse(A) := block(
[n,I,D:[],finalmatrix,x],
    A: to_matrix(A),
    n: length(A),
    finalmatrix:ident(n),
    for x:1 thru n do
       D:append(D,[A[x][x]]),
    if is_lower_triangular(A) then(
    for j:n step -1 thru 1 do(
    	for i:n step -1 thru 1 do(
    	I:ident(n),
    	if i>j then(
    		I[i][j]: -A[i][j]/D[i],
    		finalmatrix: finalmatrix.I)
    	)
    ))
    else(
    for j:1 thru n do(
    	for i:1 thru n do(
    	I:ident(n),
    	if j>i then(
    		I[i][j]: -A[i][j]/D[i],
    		finalmatrix: finalmatrix.I)
    	)
    )
    ),
    for x:n step -1 thru 1 do(
    I:ident(n),
    I[x][x]:1/A[x][x],
    finalmatrix: finalmatrix.I
    ),
    return(finalmatrix)
)$
