
 to_matrix(L):=block(
    if matrixp(L) then L
    else apply('matrix,L)
 )$

check_row_echelon(A) := block(
    [rows, cols, pivots, i, j, is_echelon , B],
    B : to_matrix(A),
    rows: length(B),
    cols: length(B[1]),
    pivots: [],
    is_echelon: true,
    
      for i:1 thru rows do (
        j: 1,
        while j <= cols and B[i][j] = 0 do j: j + 1,
        if j <= cols then (
            if not emptyp(pivots) and j <= last(pivots) then is_echelon: false,
            pivots: endcons(j, pivots)
        )
    ),
    is_echelon
)$

check_reduced_row_echelon(A) := block(
    [rows, cols, pivots, i, j , k, is_reduced_echelon , B],
    B : to_matrix(A),
    rows: length(B),
    cols: length(B[1]),
    pivots: [],
    is_reduced_echelon: true,
    
    for i:1 thru rows do (
        j: 1,
        while j <= cols and B[i][j] = 0 do j: j + 1,
        if j <= cols then (
            if not emptyp(pivots) and j <= last(pivots) then is_reduced_echelon: false,
            pivots: endcons(j, pivots),
            if B[i][j] # 1 then is_reduced_echelon: false,
            for k:1 thru rows do (
                if k # i and B[k][j] # 0 then is_reduced_echelon: false
            )
        )
    ),
    is_reduced_echelon
)$

check_permutation(A) := block(
    [B,rows,cols,is_permutation , i,j , count_ones_row , count_ones_col],
    B : to_matrix(A),
    rows : length(B),
    cols : length(B[1]),
    is_permutation : true,

    if rows # cols then return(false),
    for i:1 thru rows do(
        count_ones_row : 0,
        for j:1 thru cols do(
            if B[i][j] = 1 then count_ones_row : count_ones_row+1
            else if B[i][j] # 0 then is_permutation :false
        ),
        if count_ones_row # 1 then is_permutation : false
    ),
    for j:1 thru cols do(
        count_ones_col : 0,
        for i:1 thru cols do(
            if B[i][j] = 1 then count_ones_col : count_ones_col+1
            else if B[i][j] # 0 then is_permutation :false
        ),
        if count_ones_col # 1 then is_permutation : false
    ),
    is_permutation
)$

check_elementary(A) := block(
    [B,n, type: 0, I, i, j, k, diff_rows, scalar, found, diag_zero,flag],
    
    B : to_matrix(A),
    n: length(B),
    if n # length(B[1]) then return(0),
    
    
    I: ident(n),
    
    if B = I then (
        return(1)
    ),
    

    diff_rows: [],
    for i:1 thru n do (
        if B[i] # I[i] then diff_rows: endcons(i, diff_rows)
    ),
    

    if length(diff_rows) = 2 then (
        [i, j]: [diff_rows[1], diff_rows[2]],
        if B[i] = I[j] and B[j] = I[i] then (
            return(3)
        )
    )
    else if length(diff_rows) = 1 then (
        i: diff_rows[1],
        scalar: B[i][i],
        if scalar = 0 then(
             return(0)
        ),
        if scalar # 1 and B[i] = I[i] * scalar then (
            return(1)
        ),
        found: false,
        flag : false,
        for k:1 thru n while not found do (
            if k # i and B[i] = I[i] + I[k] * B[i][k] then (
                found: true,
                flag:true,
                return(2)
            )
        ),
        if flag then return(2)
    ),
    
    0
)$


/* Abolfazl */
random_lowertriangular(n, x) := block(
    [B],
    B : zeromatrix(n, n),
    for i:1 thru n do(
        for j:i thru n do(
            B[i, j] : 2 * random(x) - x
        )
    ),
    B
)$


/* Abolfazl */
random_invertible(n, x) := block(
    [B , i , j],
    B : zeromatrix(n, n),
    for i:1 thru n while determinant(B) = 0 do(
        for j:1 thru n do(
            B[i][j] :  if integerp(x) then 
                                    random(2*x + 1) - x
                                else 
                                    x * (2*random(1.0) - 1)
        )
    ),
    B
)$

/* Abolfazl */
random_permutation(n) := block(
    [B, A, t1, t2, h1, h2],
    B : zeromatrix(n, n),
    A : makelist(i, i, 1, n),
    for i:1 thru n do(
        t1 : random(n) + 1,
        t2 : random(n) + 1,
        h1 : A[t1],
        h2 : A[t2],
        A[t1] : h2,  
        A[t2] : h1 
    ),
    for j:1 thru n do(
        B[j, A[j]] : 1
    ),
    B
)$

random_reduced_row_echelon(n, m, x) := block(
    [A, pivots, i, j, k, current_row],
    A: zeromatrix(n, m),
    pivots: [],
    current_row: 1,
    
    for j:1 thru m while current_row <= n do (
        if random(1.0) > 0.5 then (
            A[current_row,j]: 1,
            pivots: endcons(j, pivots),
            
            for k:1 thru current_row-1 do A[k,j]: 0,
            
            for k:j+1 thru m do (
                A[current_row,k]: if integerp(x) then 
                                    random(2*x + 1) - x
                                else 
                                    x * (2*random(1.0) - 1)
            ),
            current_row: current_row + 1
        )
    ),
    A
)$

triangular_inverse(A) := block(
[n,I,D:[],finalmatrix,x],
    A: to_matrix(A),
    n: length(A),
    finalmatrix:ident(n),
    for x:1 thru n do
       D:append(D,[A[x][x]]),
    if is_lower_triangular(A) then(
    for j:n step -1 thru 1 do(
      for i:n step -1 thru 1 do(
      I:ident(n),
      if i>j then(
        I[i][j]: -A[i][j]/D[i],
        finalmatrix: finalmatrix.I)
      )
    ))
    else(
    for j:1 thru n do(
      for i:1 thru n do(
      I:ident(n),
      if j>i then(
        I[i][j]: -A[i][j]/D[i],
        finalmatrix: finalmatrix.I)
      )
    )
    ),
    for x:n step -1 thru 1 do(
    I:ident(n),
    I[x][x]:1/A[x][x],
    finalmatrix: finalmatrix.I
    ),
    return(finalmatrix)
)$

triangular_det(A) := block(
    [B,i,det],
    B:to_matrix(A),
    n:length(B),
    det:1,
    if is_upper_trianngular(B) or is_lower_trianngular(B) then (
        for i:1 thru n do(
            det : det*B[i][i]
        )   
    )
    else return("input matrix is not triangular"),
    det 
)$

is_upper_triangular(A):=block(
    [n,B,i,j,result],
    B:to_matrix(A),
    n:length(B),
    result : true,
    if n # length(B[1]) then return(false),

    for i:2 thru n do(
        for j:1 thru i-1 do(
            if B[i][j] # 0 then result :false
        )
    ),
    return(result)
)$

is_lower_triangular(A):=block(
    [n,B,i,j,result],
    B:to_matrix(A),
    n:length(B),
    result : true,
    if n # length(B[1]) then return(false),

    for i:1 thru n-1 do(
        for j:i+1 thru n do(
            if B[i][j] # 0 then result :false
        )
    ),
    return(result)
)$

elementary_inverse(A):=block(
    [n,B,C,diff_rows],
    B:to_matrix(A),
    n:length(B),
    if n # length(B[1]) then return(0),
    C : zeromatrix(n,n),
    I: ident(n),
    if B = I then (
        return(I)
    ),
    if check_elementary(B) = 1 then(
        C: I,
        for i:1 thru n do(
            if B[i][i] # 1 then(
                C[i][i] : (1/B[i][i])
            )
        ),
        return(C)
    )
    else if check_elementary(B) = 2 then(
        C:I,
        for i:1 thru n do(
            for j:1 thru n do(
                if i#j and B[i][j]#0 then(
                    C[i][j] : -B[i][j]
                )
            )
        ),
        return(C)
    )
    else if check_elementary(B) = 3 then(
        return(B)
    ) else return("input is not elemetary")
)$

gauss_row_echelon(P0):= block(
    [rows,cols,B,i,j,k,d,E,L1,P,L2 , list1, list2 , result_list],
     B:to_matrix(P0),
    rows:length(B),
    cols:length(B[1]),
    result_list :[],
    list1 :[],
    list2:[],
    i:1,
    for j :1 thru cols while i<rows+1 do(
        if B[i][j]#0 then(
            for k : i+1 thru rows do(
                if B[k][j]#0 then(
                    E : ident(rows),
                    E[k][j] : -(B[k][j]/B[i][j]),
                    list1 : endcons(E , list1),
                    B : E.B,
                    list2 : endcons(B , list2)
                )
            ) 
        )else if B[i][j]=0 then (
            for k : i+1 thru rows do(
                if B[k][j]#0 then(
                    E : ident(rows),
                    E[i][i]:0,
                    E[k][k]:0,
                    E[i][k]:1,
                    E[k][i]:1,
                    list1 : endcons(E , list1),
                    B : E.B,
                    list2 : endcons(B , list2),
                    i:i-1,
                    j:j-1,
                    return(0)
                )else if k=rows and B[k][j]=0 then(
                    i:i-1
                )
            ) 
        ),
        i:i+1
    ),
    if length(list1)=0 then list1: endcons(ident(rows),list1),
    if length(list2)=0 then list2: endcons(B,list2),
    result_list : [list2,list1],
    return(result_list)
)$

gauss_jordan(Q0):=block(
    [rows,cols,B,i,j,k,d,E,L1,P,L2 , list1, list2 , result_list],
     B:to_matrix(Q0),
    rows:length(B),
    cols:length(B[1]),
    result_list :[],
    list1 :[],
    list2:[],
    i:1,
    for j :1 thru cols while i<rows+1 do(
        if B[i][j]#0 then(
            for k : 1 thru rows do(
                if B[k][j]#0 and k#i then(
                    E : ident(rows),
                    E[k][j] : -(B[k][j]/B[i][j]),
                    list1 : endcons(E , list1),
                    B : E.B,
                    list2 : endcons(B , list2)
                )
            ) 
        )else if B[i][j]=0 then (
            for k : i+1 thru rows do(
                if B[k][j]#0 then(
                    E : ident(rows),
                    E[i][i]:0,
                    E[k][k]:0,
                    E[i][k]:1,
                    E[k][i]:1,
                    list1 : endcons(E , list1),
                    B : E.B,
                    list2 : endcons(B , list2),
                    i:i-1,
                    j:j-1,
                    return(0)
                )else if k=rows and B[k][j]=0 then(
                    i:i-1
                )
            ) 
        ),
        i:i+1
    ),
    i:1,
    for j:1 thru cols while i < rows+1 do(
        if B[i][j]#0 then(
            E : ident(rows),
            E[i][i] : 1/B[i][j],
            list1: endcons(E,list1),
            B:E.B,
            list2:endcons(B,list2),
            i:i+1,
            j:0
        )
    ),
    
    result_list : [list2,list1],
    return(result_list)
)$

lpl(A):=block(
    [n,B,i,j,d,E,L1,P,L2 , list1, list2,list3 , result_list],
    B:to_matrix(A),
    n:length(B),
    result_list :[],
    list1 :[],
    list2:[],
    list3:[],
    if n # length(B[1]) then return(0),
    for i:1 thru n do(
        for j:n step -1 thru 1 do(
            if B[i][j]# 0 then (
                for k:i+1 thru n do(
                    if B[k][j] #0 then(
                        E : ident(n),
                        E[k][i] : -(B[k][j]/B[i][j]),
                        list1 : endcons(E , list1),
                        B : E.B
                    )
                ),
                E : ident(n),
                E[j][j] : 1/B[i][j],
                list2:endcons(E,list2),
                B: B.E,
                return(0)
            )
        )
    ),
    if length(list1)=0 then list1: endcons(ident(n),list1),
    result_list:endcons(list1,result_list),
    for i:1 thru n do(
        for j:n step -1 thru 1 do(
            if B[i][j]# 0 then (
                for k:j-1 step -1 thru 1 do(
                    if B[i][k] #0 then(
                        E : ident(n),
                        E[j][k] : -(B[i][k]/B[i][j]),
                        list2 : endcons(E , list2),
                        B : B.E
                    )
                ),
                return(0)
            )
        )
    ),
    if length(list2)=0 then list2: endcons(ident(n),list2),
    result_list:endcons(list2,result_list),
    P:B,

    list1: reverse(list1),
    list1 : map(elementary_inverse , list1),
    L1 : apply("." , list1),

    list2: reverse(list2),
    list2 : map(elementary_inverse , list2),
    L2 : apply("." , list2),

    list3: [L1,P,L2],

    result_list : endcons(list3 , result_list),
    
    return(result_list)
)$

lpu(A):=block(
    [n,B,i,j,d,E,L1,P,U1 , list1, list2,list3 , result_list],
    B:to_matrix(A),
    n:length(B),
    result_list :[],
    list1 :[],
    list2:[],
    list3:[],
    if n # length(B[1]) then return(0),
    for i:1 thru n do(
        for j:1 thru n do(
            if B[i][j]# 0 then (
                for k:i+1 thru n do(
                    if B[k][j] #0 then(
                        E : ident(n),
                        E[k][i] : -(B[k][j]/B[i][j]),
                        list1 : endcons(E , list1),
                        B : E.B
                    )
                ),
                E : ident(n),
                E[j][j] : 1/B[i][j],
                list2:endcons(E,list2),
                B: B.E,
                return(0)
            )
        )
    ),
    if length(list1)=0 then list1: endcons(ident(n),list1),
    result_list:endcons(list1,result_list),
    for i:1 thru n do(
        for j:1 thru n do(
            if B[i][j]# 0 then (
                for k:j+1 thru n do(
                    if B[i][k] #0 then(
                        E : ident(n),
                        E[j][k] : -(B[i][k]/B[i][j]),
                        list2 : endcons(E , list2),
                        B : B.E
                    )
                ),
                return(0)
            )
        )
    ),
    if length(list2)=0 then list2: endcons(ident(n),list2),
    result_list:endcons(list2,result_list),
    P:B,

    list1: reverse(list1),
    list1 : map(elementary_inverse , list1),
    L1 : apply("." , list1),

    list2: reverse(list2),
    list2 : map(elementary_inverse , list2),
    U1 : apply("." , list2),

    list3: [L1,P,U1],

    result_list : endcons(list3 , result_list),
    
    return(result_list)
)$

inverse_lpl(A):=block(
      [n,B,i,j,d,E,L1,P,L2 , list1, list2,list3 , result],
    B:to_matrix(A),
    n:length(B),
    list1 :[],
    list2:[],
    list3:[],
    if n # length(B[1]) then return(0),
    for i:1 thru n do(
        for j:n step -1 thru 1 do(
            if B[i][j]# 0 then (
                for k:i+1 thru n do(
                    if B[k][j] #0 then(
                        E : ident(n),
                        E[k][i] : -(B[k][j]/B[i][j]),
                        list1 : endcons(E , list1),
                        B : E.B
                    )
                ),
                E : ident(n),
                E[j][j] : 1/B[i][j],
                list2:endcons(E,list2),
                B: B.E,
                return(0)
            )
        )
    ),
    if length(list1)=0 then list1: endcons(ident(n),list1),
    for i:1 thru n do(
        for j:n step -1 thru 1 do(
            if B[i][j]# 0 then (
                for k:j-1 step -1 thru 1 do(
                    if B[i][k] #0 then(
                        E : ident(n),
                        E[j][k] : -(B[i][k]/B[i][j]),
                        list2 : endcons(E , list2),
                        B : B.E
                    )
                ),
                return(0)
            )
        )
    ),
    if length(list2)=0 then list2: endcons(ident(n),list2),
    P:B,
    
    list1: reverse(list1),
    L1 : apply(".", list1),
    L2 : apply("." , list2),

    result : L2.P.L1,

    return(result)

)$

inverse3(A)=block(
    [n,B,i,j,d,E,L1,P,L2 , list1, list2,list3 , result],
    B:to_matrix(A),
    n:length(B),
    list1 :[],
    list2:[],
    list3:[],
    if n # length(B[1]) then return(0),
    for i:1 thru n do(
        for j:n step -1 thru 1 do(
            if B[i][j]# 0 then (
                for k:i+1 thru n do(
                    if B[k][j] #0 then(
                        E : ident(n),
                        E[k][i] : -(B[k][j]/B[i][j]),
                        list1 : endcons(E , list1),
                        B : E.B
                    )
                ),
                E : ident(n),
                E[j][j] : 1/B[i][j],
                list2:endcons(E,list2),
                B: B.E,
                return(0)
            )
        )
    ),
    if length(list1)=0 then list1: endcons(ident(n),list1),
    for i:1 thru n do(
        for j:n step -1 thru 1 do(
            if B[i][j]# 0 then (
                for k:j-1 step -1 thru 1 do(
                    if B[i][k] #0 then(
                        E : ident(n),
                        E[j][k] : -(B[i][k]/B[i][j]),
                        list2 : endcons(E , list2),
                        B : B.E
                    )
                ),
                return(0)
            )
        )
    ),
    if length(list2)=0 then list2: endcons(ident(n),list2),
    P:B,

    list1: reverse(list1),
    L1 : apply(".", list1),
    L2 : apply("." , list2),
    L1:triangular_inverse(L1),
    L2:triangular_inverse(L2),
    result : L1.P.L2,

    return(result)

)$

plu(A):=block(
     [n,B,i,j,d,E,L1,P,U1 , list1, list2,list3 , result_list],
    B:to_matrix(A),
    B:transpose(B),
    n:length(B),
    result_list :[],
    list1 :[],
    list2:[],
    list3:[],
    if n # length(B[1]) then return(0),
    for i:1 thru n do(
        for j:1 thru n do(
            if B[i][j]# 0 then (
                for k:i+1 thru n do(
                    if B[k][j] #0 then(
                        E : ident(n),
                        E[k][i] : -(B[k][j]/B[i][j]),
                        list1 : endcons(E , list1),
                        B : E.B
                    )
                ),
                return(0)
            )
        )
    ),
    if length(list1)=0 then list1: endcons(ident(n),list1),
    result_list:endcons(list1,result_list),
    for i:n step -1 thru 1 do(
        for j:n step -1 thru 1 do(
            if B[i][j]# 0 then (
                for k:i-1 step -1 thru 1 do(
                    if B[k][j] #0 then(
                        E : ident(n),
                        E[k][i] : -(B[k][j]/B[i][j]),
                        list2 : endcons(E , list2),
                        B : E.B
                    )
                ),
                return(0)
            )
        )
    ),
    for i:1 thru n do(
        for j:1 thru n do(
            if B[i][j]# 0 then(
                E : ident(n),
                E[i][i] : 1/B[i][j],
                B:E.B,
                list2 : endcons(E,list2)
            )
        )
    ),
    P:B,
    if length(list2)=0 then list2: endcons(ident(n),list2),
    result_list:endcons(list2,result_list),
    P:transpose(P),
    list2:reverse(list2),
    list2:map(transpose,list2),
    list2:map(elementary_inverse,list2),
    L1:apply(".",list2),

    list1:reverse(list1),
    list1:map(transpose,list1),
    list1:map(elementary_inverse,list1),
    U1:apply(".",list1),

    list3 : [P,L1,U1],

    result_list: endcons(list3,result_list),
    return(result_list)
)$

triangular_inverse(A) := block(
[n,I,D:[],finalmatrix,x],
    A: to_matrix(A),
    n: length(A),
    finalmatrix:ident(n),
    for x:1 thru n do
       D:append(D,[A[x][x]]),
    if is_lower_triangular(A) then(
    for j:n step -1 thru 1 do(
    	for i:n step -1 thru 1 do(
    	I:ident(n),
    	if i>j then(
    		I[i][j]: -A[i][j]/D[i],
    		finalmatrix: finalmatrix.I)
    	)
    ))
    else(
    for j:1 thru n do(
    	for i:1 thru n do(
    	I:ident(n),
    	if j>i then(
    		I[i][j]: -A[i][j]/D[i],
    		finalmatrix: finalmatrix.I)
    	)
    )
    ),
    for x:n step -1 thru 1 do(
    I:ident(n),
    I[x][x]:1/A[x][x],
    finalmatrix: finalmatrix.I
    ),
    return(finalmatrix)
)$


 inverse1(A) := block(
 [finalmatrix, E, L, K, n, P, x, last_row, is_last_row_zero],
 L:gauss_row_echelon(A),
 K:length(L[1]),
 last_row: L[1][K][length(L[1][K])],
 is_last_row_zero: apply("and", map(lambda([x], x = 0), last_row)),
 if K=0 then return(triangular_inverse(A))
 else if is_last_row_zero then return(false)
 else(
 E:L[2],
 n:length(A),
 finalmatrix:ident(n),
 for i:1 thru K do(
 finalmatrix: E[i].finalmatrix
 ),
 P:triangular_inverse(L[1][K]),
 finalmatrix: P.finalmatrix,
 return(finalmatrix)
 )
 )$


inverse1VSinverse2(A) := block(
[start_time, end_time],
start_time: elapsed_real_time(),
result1: inverse1(A),
end_time: elapsed_real_time(),
duration1: end_time - start_time,
print("inverse1 Time:", duration1, "ms"),
start_time: elapsed_real_time(),
result2: inverse2(A),
end_time: elapsed_real_time(),
duration2: end_time - start_time,
print("inverse2 Time:", duration2, "ms"),
if duration1 < duration2 then print("inverse1's faster") else print("inverse2's faster")
)$

det1(A) := block(
   [L, det:1, i, K],
    A: to_matrix(A),
    L:gauss_row_echelon(A),
    K:length(L[1]),
    if K = 0 then return(triangular_det(A))
    else(
    for i:1 thru K do(
    det: det*triangular_det(L[2][i])
    ),
    det: det*triangular_det(L[1][K]),
    return(det)
    )
)$

det2(M) := block(
    [n, m, det: 0, minor, i, j],
    M: to_matrix(M),
    remove_index(lst, idx) := block(
        [res: []],
        for k:1 thru length(lst) do (
            if k # idx then res: append(res, [lst[k]])
        ),
        return(res)
    ),
    n: length(M),
    m: length(first(M)),
    if n = 1 then
        return(first(first(M)))
    else (
        for j:1 thru m do (
            minor: [],
            for i:2 thru n do (
                minor: append(minor, [remove_index(M[i], j)])
            ),
            det: det + (-1)^(1+j) * M[1][j] * det2(minor)
        ),
        return(det)
    )
)$





det1VSdet2(A) := block(
[start_time, end_time],
start_time: elapsed_real_time(),
result1: det1(A),
end_time: elapsed_real_time(),
duration1: end_time - start_time,
print("det1 Time:", duration1, "ms"),
start_time: elapsed_real_time(),
result2: det2(A),
end_time: elapsed_real_time(),
duration2: end_time - start_time,
print("det2 Time:", duration2, "ms"),
if duration1 < duration2 then print("det1's faster") else print("det2's faster")
)$

